// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:


    // Tratando zx e zy
    Mux16(a=x, b=false, sel=zx, out=fimxu);
    Mux16(a=y, b=false, sel=zy, out=fimyu);

    // Tratando nx e ny
    Not16(in=fimxu, out=finx);
    Mux16(a=fimxu, b=finx, sel=nx, out=fimxd);
    Not16(in=fimyu, out=finy);
    Mux16(a=fimyu, b=finy, sel=ny, out=fimyd);

    // Tratando a multiplicação e a adição
    And16(a=fimxd, b=fimyd, out=xVy); //x vezes y
    Add16(a=fimxd, b=fimyd, out=xMy); //x mais y
    Mux16(a=xVy, b=xMy, sel=f, out=processo);

    // Tratando o no
    Not16(in=processo, out=notp);
    Mux16(a=processo, b=notp, sel=no, out[15]=ng, out[0..7]=verifu, out[8..15]=verifd, out[0..15]=out[0..15]);
    //ng vai pegar o bit mais significativo, que vai dizer se o num é negativo ou nao pelo proprio resultado

    //O OR gera 0 somente se todos os bits de entrada forem 0 (portanto resultado 0)
    //Se algum bit de entrada for 1, a saída do OR será 1, (portanto o resultado não é 0)
    //O  NOT ficará responsável por inverter o resultado, logo:
    //se algum bit de resultado estiver ligado, a saída será 0 e significará que o resultado final não é 0
    //se todos os bits resultantes estiverem desligados, a saída zr é 1, ou seja, indicando que sim, o resultado final é 0
    Or8Way(in=verifu, out=oru); // chechando se os 8 primeiros bits irão resultar em um bit 0 ou 1
    Or8Way(in=verifd, out=ord); // checando se os 8 bits finais irão resultar em um bit 0 ou 1
    Or(a=oru, b=ord, out=resor); // verifica se há uma entrada de dois 0's, resultando em 0, ou não, resultando em 1 
    Not(in=resor, out=zr); // apenas inverte o resultado pra mostrar em zr se o resultado final é ou não zero, 
    //no caso zr= 0 o resultado não é, zr =1 o resultado é zero.


}